/*
ID: kevinca3
LANG: JAVA
TASK: nocows
*/
import java.io.*;
import java.util.*;

class nocows {
	
	public static int n,k;
	public static int[][] bintree1, bintree2;
	
	public static void main(String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("nocows.in"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("nocows.out")));
		StringTokenizer st = new StringTokenizer(f.readLine());
		n = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		bintree1 = new int[k+1][n+1]; // bintree[i][j] => ith row, n nodes
		bintree2 = new int[k+1][n+1]; 
		for(int height = 1; height<=k; height++){
			for(int number = 1; number<=n; number++){
				if(number == 1 && height == 1) bintree1[height][number] = 1;
				else if(number == 1 || height == 1){
					bintree1[height][number] = 0;
				}
				else{
					long total = 0;
					for(int i = 0; i <= number-1; i++){
						total += bintree1[height-1][number-1-i]*bintree2[height-1][i];
						total += bintree2[height-1][number-1-i]*bintree1[height-1][i];
						total += bintree1[height-1][number-1-i]*bintree1[height-1][i];
					}
					bintree1[height][number] = (int)(total%9901);
				}
				
				if(height == 1){
					bintree2[height][number] = 0;
				}
				else if(number == 1){
					bintree2[height][number] = 1;
				}
				else{
					long total = 0;
					for(int i = 0 ; i <= number-1; i++){
						total += bintree2[height-1][number-1-i]*bintree2[height-1][i];
					}
					bintree2[height][number] = (int)(total%9901);
				}
			}
		}
		out.println(bintree1[k][n]);
		out.close();
	}
}