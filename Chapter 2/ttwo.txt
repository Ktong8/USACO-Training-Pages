/*
ID: kevinca3
LANG: JAVA
TASK: ttwo
*/
import java.io.*;
import java.util.*;

class ttwo {
	
	public static int[][] map, positions; //map: 0 = free, 1 = obstacle, 2 = farmer, 3 = cow
	public static ArrayList<Integer> visited;
	
	public static void main(String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("ttwo.in"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("ttwo.out")));
		positions = new int[2][3]; //positions[0] -> farmer, positions[1] -> cow, [x][2] -> orientation 0=north, 1=east, etc
		map = new int[10][10]; //map[1][2] row 1 column 2
		StringTokenizer st;
		visited = new ArrayList<Integer>();
		boolean check = true;
		for(int i = 0 ; i<10; i++){
			st = new StringTokenizer(f.readLine());
			String temp = st.nextToken();
			for(int j = 0; j<10; j++){
				if(temp.charAt(j) == '*'){
					map[i][j] = 1;
				}
				else if (temp.charAt(j) == 'F'){
					map[i][j] = 2;
					positions[0][0] = i;
					positions[0][1] = j;
					positions[0][2] = 0;
				}
				else if (temp.charAt(j) == 'C'){
					map[i][j] = 3;
					positions[1][0] = i;
					positions[1][1] = j;
					positions[1][2] = 0;
				}
			}
		}
		visited.add(100000*positions[0][2] + 10000*positions[1][2] + 1000*positions[0][0] + 100*positions[0][1] + 10*positions[1][0] + positions[1][1]);
		int time = 0;
		while(!((positions[0][0] == positions[1][0]) && (positions[0][1] == positions[1][1]))){
			time++;
			System.out.println("(" + positions[0][0] + ", " + positions[0][1] + ", " + positions[0][2] + "), (" + positions[1][0] + ", " + positions[1][1] + ", " + positions[1][2] + ")");
			if(positions[0][2] == 0){ //north
				if(positions[0][0] == 0 || map[positions[0][0]-1][positions[0][1]] == 1){ //rotate if obstacle or top
					positions[0][2] = 1;
				}
				else{
					positions[0][0] -= 1;
				}
			}
			else if(positions[0][2] == 1){ //east
				if(positions[0][1] == 9 || map[positions[0][0]][positions[0][1]+1] == 1){
					positions[0][2] = 2;
				}
				else{
					positions[0][1] += 1;
				}
			}
			else if(positions[0][2] == 2){ //south
				if(positions[0][0] == 9 || map[positions[0][0]+1][positions[0][1]] == 1){
					positions[0][2] = 3;
				}
				else{
					positions[0][0] += 1;
				}
			}
			else{//west
				if(positions[0][1] == 0 || map[positions[0][0]][positions[0][1]-1] == 1){
					positions[0][2] = 0;
				}
				else{
					positions[0][1] -= 1;
				}
			}
			if(positions[1][2] == 0){ //north
				if(positions[1][0] == 0 || map[positions[1][0]-1][positions[1][1]] == 1){ //rotate if obstacle or top
					positions[1][2] = 1;
				}
				else{
					positions[1][0] -= 1;
				}
			}
			else if(positions[1][2] == 1){ //east
				if(positions[1][1] == 9 || map[positions[1][0]][positions[1][1]+1] == 1){
					positions[1][2] = 2;
				}
				else{
					positions[1][1] += 1;
				}
			}
			else if(positions[1][2] == 2){ //south
				if(positions[1][0] == 9 || map[positions[1][0]+1][positions[1][1]] == 1){
					positions[1][2] = 3;
				}
				else{
					positions[1][0] += 1;
				}
			}
			else{//west
				if(positions[1][1] == 0 || map[positions[1][0]][positions[1][1]-1] == 1){
					positions[1][2] = 0;
				}
				else{
					positions[1][1] -= 1;
				}
			}
			if(visited.contains(100000*positions[0][2] + 10000*positions[1][2] + 1000*positions[0][0] + 100*positions[0][1] + 10*positions[1][0] + positions[1][1])){
				out.println(0);
				check = false;
				break;
			}
			visited.add(100000*positions[0][2] + 10000*positions[1][2] + 1000*positions[0][0] + 100*positions[0][1] + 10*positions[1][0] + positions[1][1]);
		}
		if(check){
			out.println(time);
		}
		out.close();
	}
}