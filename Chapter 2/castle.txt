/*
ID: kevinca3
LANG: JAVA
TASK: castle
*/
import java.io.*;
import java.util.*;

class castle {
	
	public static int n,m, roomCounter, maxSize;
	public static int[][] castle;
	public static int[][] castleCheck;
	public static int[][] castleCheck2;
	public static ArrayList<Integer> rooms;
	public static int max;
	public static int[] maxCoords; //Directions: 1 = east, 0 = north
	
	public static void main(String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("castle.in"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("castle.out")));
		StringTokenizer st = new StringTokenizer(f.readLine());
		n = Integer.parseInt(st.nextToken()); // length
		m = Integer.parseInt(st.nextToken()); // width
		castle = new int[n][m];
		maxCoords = new int[3];
		max = 0;
		castleCheck = new int[n][m];
		castleCheck2 = new int[n][m];
		for(int i = 0; i<m; i++){
			st = new StringTokenizer(f.readLine());
			for(int j = 0; j<n; j++){
				castle[j][i] = Integer.parseInt(st.nextToken());
			}
		}
		int counter = 1; 
		rooms = new ArrayList<Integer>();
		for(int i = 0; i<n; i++){
			for(int j = 0; j<m; j++){
				if(castleCheck[i][j] == 0){
					rooms.add(floodFill(i,j,counter));
					counter++;
				}
			}
		}
		upDate(0,0);
		Collections.sort(rooms);
		out.println(rooms.size());
		out.println(rooms.get(rooms.size()-1));
		out.println(max);
		out.print(maxCoords[0] + " " + maxCoords[1] + " ");
		if(maxCoords[2] == 0){
			out.println("N");
		}
		else{
			out.println("E");
		}
		out.close();
	}
	
	public static void upDate(int i, int j){
		castleCheck2[i][j] = 1;
		if(castle[i][j]%2 == 1 && i>0 && castleCheck[i-1][j] != castleCheck[i][j] && castleCheck2[i-1][j] == 0){
			if(rooms.get(castleCheck[i-1][j]-1) + rooms.get(castleCheck[i][j]-1) > max){
				max = rooms.get(castleCheck[i-1][j]-1) + rooms.get(castleCheck[i][j]-1);
				maxCoords[0] = j+1;
				maxCoords[1] = i;
				maxCoords[2] = 1;
			}
			else if(rooms.get(castleCheck[i-1][j]-1) + rooms.get(castleCheck[i][j]-1) == max){
				if(i<= maxCoords[1] && j+1>= maxCoords[0] && !(i==maxCoords[1] && j+1 == maxCoords[0])){
					maxCoords[0] = j+1;
					maxCoords[1] = i;
					maxCoords[2] = 1;
				}
			}
		}
		if((castle[i][j]/2)%2 == 1 && j>0 && castleCheck[i][j-1] != castleCheck[i][j] && castleCheck2[i][j-1] == 0){
			if(rooms.get(castleCheck[i][j-1]-1) + rooms.get(castleCheck[i][j]-1) > max){
				max = rooms.get(castleCheck[i][j-1]-1) + rooms.get(castleCheck[i][j]-1);
				maxCoords[0] = j+1;
				maxCoords[1] = i+1;
				maxCoords[2] = 0;
			}
			else if(rooms.get(castleCheck[i][j-1]-1) + rooms.get(castleCheck[i][j]-1) == max){
				if(i+1<= maxCoords[1] && j+1>= maxCoords[0]){
					maxCoords[0] = j+1;
					maxCoords[1] = i+1;
					maxCoords[2] = 0;
				}
			}
		}
		if((castle[i][j]/4)%2 == 1 && i<n-1 && castleCheck[i+1][j] != castleCheck[i][j] && castleCheck2[i+1][j] == 0){
			if(rooms.get(castleCheck[i+1][j]-1) + rooms.get(castleCheck[i][j]-1) > max){
				max = rooms.get(castleCheck[i+1][j]-1) + rooms.get(castleCheck[i][j]-1);
				maxCoords[0] = j+1;
				maxCoords[1] = i+1;
				maxCoords[2] = 1;
			}
			else if(rooms.get(castleCheck[i+1][j]-1) + rooms.get(castleCheck[i][j]-1) == max){
				if(i+1<= maxCoords[1] && j+1>= maxCoords[0] && !(i+1==maxCoords[1] && j+1 == maxCoords[0])){
					maxCoords[0] = j+1;
					maxCoords[1] = i+1;
					maxCoords[2] = 1;
				}
			}
		}
		if((castle[i][j]/8)%2 == 1 && j<m-1 && castleCheck[i][j+1] != castleCheck[i][j] && castleCheck2[i][j+1] == 0){
			if(rooms.get(castleCheck[i][j+1]-1) + rooms.get(castleCheck[i][j]-1) > max){
				max = rooms.get(castleCheck[i][j+1]-1) + rooms.get(castleCheck[i][j]-1);
				maxCoords[0] = j+2;
				maxCoords[1] = i+1;
				maxCoords[2] = 0;
			}
			else if(rooms.get(castleCheck[i][j+1]-1) + rooms.get(castleCheck[i][j]-1) == max){
				if(i+1<= maxCoords[1] && j+1>= maxCoords[0]){
					maxCoords[0] = j+2;
					maxCoords[1] = i+1;
					maxCoords[2] = 0;
				}
			}
		}
		if(i>0 && castleCheck2[i-1][j] == 0){
			upDate(i-1,j);
		}
		if(j>0 && castleCheck2[i][j-1] == 0){
			upDate(i,j-1);
		}
		if(i<n-1 && castleCheck2[i+1][j] == 0){
			upDate(i+1,j);
		}
		if(j<m-1 && castleCheck2[i][j+1] == 0){
			upDate(i,j+1);
		}
	}
	
	public static int floodFill(int i, int j, int index){
		int val = 1;
		castleCheck[i][j] = index;
		if(castle[i][j]%2 == 0 && i>0 && castleCheck[i-1][j] == 0){
			val += floodFill(i-1,j,index);
		}
		if((castle[i][j]/2)%2 == 0 && j>0 && castleCheck[i][j-1] == 0){
			val += floodFill(i,j-1,index);
		}
		if((castle[i][j]/4)%2 == 0 && i<n-1 && castleCheck[i+1][j] == 0){
			val += floodFill(i+1,j,index);
		}
		if((castle[i][j]/8)%2 == 0 && j<m-1 && castleCheck[i][j+1] == 0){
			val += floodFill(i,j+1,index);
		}
		return val;
	}
}